{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["import * as React from 'react'\n\ntype PinInputValues = string[]\n\nexport interface PinInputActions {\n  /**\n   * Imperative function call to lose focus.\n   */\n  blur: () => void\n  /**\n   * Imperative function call to set focus on the first empty field. In the case when `error: true`,\n   * the focus is set to the first empty field. The argument takes an optional parameter in the form\n   * of a number (ordinal index), which will set the focus on a specific field.\n   * @param {number} index\n   */\n  focus: (index?: number) => void\n}\n\nexport interface UsePinInputProps {\n  /**\n   * Field values. If no values are passed, the default value defined in `defaultValues` is used.\n   */\n  values?: PinInputValues\n  /**\n   * The function is called every time the value changes.\n   * @param {PinInputValues} values\n   */\n  onChange?: (values: PinInputValues) => void\n  /**\n   * The function is called when all fields are filled in.\n   * @param {string} value\n   */\n  onComplete?: (value: string) => void\n  /**\n   * A reference to imperative actions.\n   */\n  actionRef?: React.Ref<PinInputActions>\n  /**\n   * Automatic focus setting at the first mount, is set to the first field.\n   */\n  autoFocus?: boolean\n  /**\n   * In the case when the component is unmanaged, default values are set, where the number of values\n   * in the array is equal to the number of fields.\n   */\n  defaultValues?: PinInputValues\n  /**\n   * Changes the type of keyboard display on mobile devices.\n   */\n  type?: 'numeric' | 'alphanumeric'\n  /**\n   * If `true', then the attribute `autocomplete=\"one-time-code\"` is added, otherwise\n   * `autocomplete=\"off\"`.\n   */\n  otp?: boolean\n  /**\n   * Placeholder for the `input` element.\n   */\n  placeholder?: string\n  /**\n   * If `true`, the transmission of event handlers `onChange`, `onBlur`, `onFocus` and `onKeyDown`\n   * in the parameters of each field is prevented.\n   */\n  disabled?: boolean\n  /**\n   * If `true`, then the attribute `type=\"password\"` is set, otherwise `type=\"text\"`.\n   */\n  mask?: boolean\n  /**\n   * If `true`, then the focus behavior on the fields changes.\n   */\n  error?: boolean\n}\n\nexport type PinInputClearOptions = {\n  /**\n   * If `true', then the focus is set on the first field, otherwise after clearing it disappears.\n   */\n  focus?: boolean\n}\n\nexport interface PinInputFieldProps {\n  /**\n   * Returns a callback function to register the field.\n   */\n  ref: React.RefCallback<HTMLInputElement>\n  /**\n   * Returns the value of the field.\n   */\n  value: string\n  /**\n   * Returns the value passed by the `disabled` parameter.\n   */\n  disabled: boolean\n  /**\n   * Returns either `one-time-code` if the parameter `otp: true` was passed, otherwise `off`.\n   */\n  autoComplete: 'one-time-code' | 'off'\n  /**\n   * Returns either `text` if the parameter `type: 'alphanumeric'` was passed, otherwise `numeric`.\n   */\n  inputMode: 'text' | 'numeric'\n  /**\n   * Returns either `password` if the `mask: true` parameter was passed, or `text`.\n   */\n  type: 'text' | 'password'\n  /**\n   * Returns the value passed by the `placeholder` parameter if there are no focused fields.\n   */\n  placeholder: string\n  /**\n   * Returns the handler for the focus loss event if `disabled: false`.\n   * @param {React.FocusEvent<HTMLInputElement>} event\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n  /**\n   * Returns the handler for the focus appearance event if `disabled: false`.\n   * @param {React.FocusEvent<HTMLInputElement>} event\n   */\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  /**\n   * Returns a handler for the field change event if `disabled: false`.\n   * @param {React.ChangeEvent<HTMLInputElement>} event\n   */\n  onChange?: React.ChangeEventHandler<HTMLInputElement>\n  /**\n   * Returns a handler for the keystroke event if `disabled: false`.\n   * @param {React.KeyboardEvent<HTMLInputElement>} event\n   */\n  onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>\n}\n\nexport function usePinInput({\n  values: valuesProp,\n  onChange: onChangeProp,\n  onComplete,\n  actionRef,\n  autoFocus = false,\n  defaultValues = Array(6).fill(''),\n  type = 'numeric',\n  otp = false,\n  placeholder = 'â—‹',\n  disabled = false,\n  mask = false,\n  error = false,\n}: UsePinInputProps = {}) {\n  const [valuesState, setValues] = React.useState(defaultValues)\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  const isControlled = valuesProp !== undefined\n  const values = (isControlled ? valuesProp : valuesState) as PinInputValues\n  const isTypeAlphanumeric = type === 'alphanumeric'\n\n  const fieldRefs = React.useRef<HTMLInputElement[]>(Array(values.length).fill(null))\n\n  const setFocus = React.useCallback((index = 0) => {\n    fieldRefs.current[index]?.focus()\n  }, [])\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      setFocus()\n    }\n  }, [autoFocus, setFocus])\n\n  const setBlur = React.useCallback(() => {\n    fieldRefs.current[focusedIndex]?.blur()\n  }, [focusedIndex])\n\n  React.useImperativeHandle(\n    actionRef,\n    () => ({\n      focus: (index = 0) => {\n        const emptyFieldIndex = values.findIndex((v) => !v)\n\n        setFocus(error ? (emptyFieldIndex === -1 ? index : emptyFieldIndex) : index)\n      },\n      blur: setBlur,\n    }),\n    [setBlur, setFocus, values, error]\n  )\n\n  const setFieldRef = React.useCallback(\n    (index: number) => (ref: HTMLInputElement) => {\n      fieldRefs.current[index] = ref\n    },\n    []\n  )\n\n  const updateValues = React.useCallback(\n    (values: PinInputValues) => {\n      if (!isControlled) {\n        setValues(values)\n      }\n\n      onChangeProp?.(values)\n    },\n    [isControlled, setValues, onChangeProp]\n  )\n\n  const onChange = React.useCallback(\n    (index: number): React.ChangeEventHandler<HTMLInputElement> =>\n      (event) => {\n        let { value } = event.target\n\n        value = value.trim()\n\n        const regexType = isTypeAlphanumeric ? /^[a-z\\d]*$/i : /^\\d*$/\n\n        if (!regexType.test(value)) {\n          return\n        }\n\n        if (isTypeAlphanumeric) {\n          value = value.toUpperCase()\n        }\n\n        if (value.length > 2) {\n          if (value.length === values.length) {\n            updateValues(value.split(''))\n            onComplete?.(value)\n          }\n\n          return\n        }\n\n        if (value.length === 2) {\n          const currentValue = values[index]\n\n          if (currentValue === value[0]) {\n            value = value[1]\n          } else if (currentValue === value[1]) {\n            value = value[0]\n          } else {\n            return\n          }\n        }\n\n        const nextValues = values.slice()\n        nextValues[index] = value\n        updateValues(nextValues)\n\n        if (value) {\n          if (!nextValues.includes('')) {\n            onComplete?.(nextValues.join(''))\n          }\n\n          if (index !== values.length - 1) {\n            if (error) {\n              const emptyFieldIndex = nextValues.findIndex((v) => !v)\n\n              if (emptyFieldIndex !== -1) {\n                setFocus(emptyFieldIndex)\n              }\n            } else {\n              setFocus(index + 1)\n            }\n          }\n        }\n      },\n    [isTypeAlphanumeric, values, updateValues, onComplete, setFocus, error]\n  )\n\n  const onKeyDown = React.useCallback(\n    (index: number): React.KeyboardEventHandler<HTMLInputElement> =>\n      (event) => {\n        if (event.key === 'Backspace' && !values[index] && index) {\n          setFocus(index - 1)\n        }\n      },\n    [values, setFocus]\n  )\n\n  const clear = React.useCallback(\n    ({ focus = false }: PinInputClearOptions = {}) => {\n      updateValues(Array(values.length).fill(''))\n\n      if (focus) {\n        setFocus()\n      } else {\n        setBlur()\n      }\n    },\n    [updateValues, values, setFocus, setBlur]\n  )\n\n  const onFocus = React.useCallback(\n    (index: number) => () => {\n      setFocusedIndex(index)\n    },\n    []\n  )\n\n  const onBlur = React.useCallback(() => {\n    setFocusedIndex(-1)\n  }, [])\n\n  const hasFocus = focusedIndex !== -1\n\n  const fields: PinInputFieldProps[] = values.map((value: string, index: number) => ({\n    ref: setFieldRef(index),\n    value,\n    disabled,\n    autoComplete: otp ? 'one-time-code' : 'off',\n    inputMode: isTypeAlphanumeric ? 'text' : 'numeric',\n    type: mask ? 'password' : 'text',\n    placeholder: hasFocus ? '' : placeholder,\n    ...(!disabled && {\n      onBlur,\n      onFocus: onFocus(index),\n      onChange: onChange(index),\n      onKeyDown: onKeyDown(index),\n    }),\n  }))\n\n  return { fields, clear, isFocused: hasFocus }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n"],"names":["usePinInput","values","valuesProp","onChange","onChangeProp","onComplete","actionRef","autoFocus","defaultValues","Array","fill","type","otp","placeholder","disabled","mask","error","valuesState","setValues","React","useState","focusedIndex","setFocusedIndex","isControlled","undefined","useRef","length","setFocus","useCallback","index","_fieldRefs$current$in","focus","fieldRefs","current","useEffect","setBlur","_fieldRefs$current$fo","blur","useImperativeHandle","findIndex","v","emptyFieldIndex","setFieldRef","ref","updateValues","event","value","target","trim","isTypeAlphanumeric","test","toUpperCase","split","currentValue","nextValues","slice","includes","join","onKeyDown","key","clear","onFocus","onBlur","fields","map","_extends","autoComplete","inputMode","hasFocus","isFocused"],"mappings":"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"}