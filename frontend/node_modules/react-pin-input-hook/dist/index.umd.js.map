{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import * as React from 'react'\n\ntype PinInputValues = string[]\n\nexport interface PinInputActions {\n  /**\n   * Imperative function call to lose focus.\n   */\n  blur: () => void\n  /**\n   * Imperative function call to set focus on the first empty field. In the case when `error: true`,\n   * the focus is set to the first empty field. The argument takes an optional parameter in the form\n   * of a number (ordinal index), which will set the focus on a specific field.\n   * @param {number} index\n   */\n  focus: (index?: number) => void\n}\n\nexport interface UsePinInputProps {\n  /**\n   * Field values. If no values are passed, the default value defined in `defaultValues` is used.\n   */\n  values?: PinInputValues\n  /**\n   * The function is called every time the value changes.\n   * @param {PinInputValues} values\n   */\n  onChange?: (values: PinInputValues) => void\n  /**\n   * The function is called when all fields are filled in.\n   * @param {string} value\n   */\n  onComplete?: (value: string) => void\n  /**\n   * A reference to imperative actions.\n   */\n  actionRef?: React.Ref<PinInputActions>\n  /**\n   * Automatic focus setting at the first mount, is set to the first field.\n   */\n  autoFocus?: boolean\n  /**\n   * In the case when the component is unmanaged, default values are set, where the number of values\n   * in the array is equal to the number of fields.\n   */\n  defaultValues?: PinInputValues\n  /**\n   * Changes the type of keyboard display on mobile devices.\n   */\n  type?: 'numeric' | 'alphanumeric'\n  /**\n   * If `true', then the attribute `autocomplete=\"one-time-code\"` is added, otherwise\n   * `autocomplete=\"off\"`.\n   */\n  otp?: boolean\n  /**\n   * Placeholder for the `input` element.\n   */\n  placeholder?: string\n  /**\n   * If `true`, the transmission of event handlers `onChange`, `onBlur`, `onFocus` and `onKeyDown`\n   * in the parameters of each field is prevented.\n   */\n  disabled?: boolean\n  /**\n   * If `true`, then the attribute `type=\"password\"` is set, otherwise `type=\"text\"`.\n   */\n  mask?: boolean\n  /**\n   * If `true`, then the focus behavior on the fields changes.\n   */\n  error?: boolean\n}\n\nexport type PinInputClearOptions = {\n  /**\n   * If `true', then the focus is set on the first field, otherwise after clearing it disappears.\n   */\n  focus?: boolean\n}\n\nexport interface PinInputFieldProps {\n  /**\n   * Returns a callback function to register the field.\n   */\n  ref: React.RefCallback<HTMLInputElement>\n  /**\n   * Returns the value of the field.\n   */\n  value: string\n  /**\n   * Returns the value passed by the `disabled` parameter.\n   */\n  disabled: boolean\n  /**\n   * Returns either `one-time-code` if the parameter `otp: true` was passed, otherwise `off`.\n   */\n  autoComplete: 'one-time-code' | 'off'\n  /**\n   * Returns either `text` if the parameter `type: 'alphanumeric'` was passed, otherwise `numeric`.\n   */\n  inputMode: 'text' | 'numeric'\n  /**\n   * Returns either `password` if the `mask: true` parameter was passed, or `text`.\n   */\n  type: 'text' | 'password'\n  /**\n   * Returns the value passed by the `placeholder` parameter if there are no focused fields.\n   */\n  placeholder: string\n  /**\n   * Returns the handler for the focus loss event if `disabled: false`.\n   * @param {React.FocusEvent<HTMLInputElement>} event\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n  /**\n   * Returns the handler for the focus appearance event if `disabled: false`.\n   * @param {React.FocusEvent<HTMLInputElement>} event\n   */\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  /**\n   * Returns a handler for the field change event if `disabled: false`.\n   * @param {React.ChangeEvent<HTMLInputElement>} event\n   */\n  onChange?: React.ChangeEventHandler<HTMLInputElement>\n  /**\n   * Returns a handler for the keystroke event if `disabled: false`.\n   * @param {React.KeyboardEvent<HTMLInputElement>} event\n   */\n  onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>\n}\n\nexport function usePinInput({\n  values: valuesProp,\n  onChange: onChangeProp,\n  onComplete,\n  actionRef,\n  autoFocus = false,\n  defaultValues = Array(6).fill(''),\n  type = 'numeric',\n  otp = false,\n  placeholder = 'â—‹',\n  disabled = false,\n  mask = false,\n  error = false,\n}: UsePinInputProps = {}) {\n  const [valuesState, setValues] = React.useState(defaultValues)\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  const isControlled = valuesProp !== undefined\n  const values = (isControlled ? valuesProp : valuesState) as PinInputValues\n  const isTypeAlphanumeric = type === 'alphanumeric'\n\n  const fieldRefs = React.useRef<HTMLInputElement[]>(Array(values.length).fill(null))\n\n  const setFocus = React.useCallback((index = 0) => {\n    fieldRefs.current[index]?.focus()\n  }, [])\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      setFocus()\n    }\n  }, [autoFocus, setFocus])\n\n  const setBlur = React.useCallback(() => {\n    fieldRefs.current[focusedIndex]?.blur()\n  }, [focusedIndex])\n\n  React.useImperativeHandle(\n    actionRef,\n    () => ({\n      focus: (index = 0) => {\n        const emptyFieldIndex = values.findIndex((v) => !v)\n\n        setFocus(error ? (emptyFieldIndex === -1 ? index : emptyFieldIndex) : index)\n      },\n      blur: setBlur,\n    }),\n    [setBlur, setFocus, values, error]\n  )\n\n  const setFieldRef = React.useCallback(\n    (index: number) => (ref: HTMLInputElement) => {\n      fieldRefs.current[index] = ref\n    },\n    []\n  )\n\n  const updateValues = React.useCallback(\n    (values: PinInputValues) => {\n      if (!isControlled) {\n        setValues(values)\n      }\n\n      onChangeProp?.(values)\n    },\n    [isControlled, setValues, onChangeProp]\n  )\n\n  const onChange = React.useCallback(\n    (index: number): React.ChangeEventHandler<HTMLInputElement> =>\n      (event) => {\n        let { value } = event.target\n\n        value = value.trim()\n\n        const regexType = isTypeAlphanumeric ? /^[a-z\\d]*$/i : /^\\d*$/\n\n        if (!regexType.test(value)) {\n          return\n        }\n\n        if (isTypeAlphanumeric) {\n          value = value.toUpperCase()\n        }\n\n        if (value.length > 2) {\n          if (value.length === values.length) {\n            updateValues(value.split(''))\n            onComplete?.(value)\n          }\n\n          return\n        }\n\n        if (value.length === 2) {\n          const currentValue = values[index]\n\n          if (currentValue === value[0]) {\n            value = value[1]\n          } else if (currentValue === value[1]) {\n            value = value[0]\n          } else {\n            return\n          }\n        }\n\n        const nextValues = values.slice()\n        nextValues[index] = value\n        updateValues(nextValues)\n\n        if (value) {\n          if (!nextValues.includes('')) {\n            onComplete?.(nextValues.join(''))\n          }\n\n          if (index !== values.length - 1) {\n            if (error) {\n              const emptyFieldIndex = nextValues.findIndex((v) => !v)\n\n              if (emptyFieldIndex !== -1) {\n                setFocus(emptyFieldIndex)\n              }\n            } else {\n              setFocus(index + 1)\n            }\n          }\n        }\n      },\n    [isTypeAlphanumeric, values, updateValues, onComplete, setFocus, error]\n  )\n\n  const onKeyDown = React.useCallback(\n    (index: number): React.KeyboardEventHandler<HTMLInputElement> =>\n      (event) => {\n        if (event.key === 'Backspace' && !values[index] && index) {\n          setFocus(index - 1)\n        }\n      },\n    [values, setFocus]\n  )\n\n  const clear = React.useCallback(\n    ({ focus = false }: PinInputClearOptions = {}) => {\n      updateValues(Array(values.length).fill(''))\n\n      if (focus) {\n        setFocus()\n      } else {\n        setBlur()\n      }\n    },\n    [updateValues, values, setFocus, setBlur]\n  )\n\n  const onFocus = React.useCallback(\n    (index: number) => () => {\n      setFocusedIndex(index)\n    },\n    []\n  )\n\n  const onBlur = React.useCallback(() => {\n    setFocusedIndex(-1)\n  }, [])\n\n  const hasFocus = focusedIndex !== -1\n\n  const fields: PinInputFieldProps[] = values.map((value: string, index: number) => ({\n    ref: setFieldRef(index),\n    value,\n    disabled,\n    autoComplete: otp ? 'one-time-code' : 'off',\n    inputMode: isTypeAlphanumeric ? 'text' : 'numeric',\n    type: mask ? 'password' : 'text',\n    placeholder: hasFocus ? '' : placeholder,\n    ...(!disabled && {\n      onBlur,\n      onFocus: onFocus(index),\n      onChange: onChange(index),\n      onKeyDown: onKeyDown(index),\n    }),\n  }))\n\n  return { fields, clear, isFocused: hasFocus }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n"],"names":["usePinInput","_temp","_ref","valuesProp","values","onChangeProp","onChange","onComplete","actionRef","autoFocus","_ref$autoFocus","defaultValues","_ref$defaultValues","Array","fill","type","_ref$type","_ref$otp","otp","placeholder","_ref$placeholder","_ref$disabled","disabled","mask","_ref$mask","_ref$error","error","_React$useState","React","useState","valuesState","setValues","focusedIndex","setFocusedIndex","_React$useState2","undefined","isControlled","isTypeAlphanumeric","fieldRefs","useRef","length","setFocus","useCallback","index","current","_fieldRefs$current$in","focus","useEffect","setBlur","_fieldRefs$current$fo","blur","useImperativeHandle","findIndex","v","emptyFieldIndex","setFieldRef","ref","updateValues","event","value","target","trim","test","toUpperCase","split","currentValue","nextValues","slice","includes","join","onKeyDown","key","clear","_temp2","_ref2$focus","onBlur","hasFocus","fields","map","autoComplete","inputMode","onFocus","isFocused"],"mappings":"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"}