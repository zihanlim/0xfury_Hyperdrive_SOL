import {
  require_react
} from "./chunk-W7JSLU5W.js";
import {
  __toESM,
  init_buffer,
  init_process
} from "./chunk-3V4EFXE5.js";

// node_modules/react-pin-input-hook/dist/index.module.js
init_process();
init_buffer();
var e = __toESM(require_react());
function n() {
  return n = Object.assign ? Object.assign.bind() : function(e2) {
    for (var n2 = 1; n2 < arguments.length; n2++) {
      var t2 = arguments[n2];
      for (var u in t2)
        Object.prototype.hasOwnProperty.call(t2, u) && (e2[u] = t2[u]);
    }
    return e2;
  }, n.apply(this, arguments);
}
function t(t2) {
  var u = void 0 === t2 ? {} : t2, r = u.values, l = u.onChange, o = u.onComplete, a = u.actionRef, i = u.autoFocus, c = void 0 !== i && i, f = u.defaultValues, s = void 0 === f ? Array(6).fill("") : f, d = u.type, v = void 0 === d ? "numeric" : d, p = u.otp, b = void 0 !== p && p, h = u.placeholder, C = void 0 === h ? "â—‹" : h, g = u.disabled, k = void 0 !== g && g, m = u.mask, y = void 0 !== m && m, x = u.error, j = void 0 !== x && x, O = e.useState(s), w = O[0], A = O[1], F = e.useState(-1), I = F[0], B = F[1], R = void 0 !== r, S = R ? r : w, $ = "alphanumeric" === v, z = e.useRef(Array(S.length).fill(null)), D = e.useCallback(function(e2) {
    var n2;
    void 0 === e2 && (e2 = 0), null == (n2 = z.current[e2]) || n2.focus();
  }, []);
  e.useEffect(function() {
    c && D();
  }, [c, D]);
  var E = e.useCallback(function() {
    var e2;
    null == (e2 = z.current[I]) || e2.blur();
  }, [I]);
  e.useImperativeHandle(a, function() {
    return { focus: function(e2) {
      void 0 === e2 && (e2 = 0);
      var n2 = S.findIndex(function(e3) {
        return !e3;
      });
      D(j ? -1 === n2 ? e2 : n2 : e2);
    }, blur: E };
  }, [E, D, S, j]);
  var H = e.useCallback(function(e2) {
    return function(n2) {
      z.current[e2] = n2;
    };
  }, []), K = e.useCallback(function(e2) {
    R || A(e2), null == l || l(e2);
  }, [R, A, l]), M = e.useCallback(function(e2) {
    return function(n2) {
      var t3 = n2.target.value;
      if (t3 = t3.trim(), ($ ? /^[a-z\d]*$/i : /^\d*$/).test(t3))
        if ($ && (t3 = t3.toUpperCase()), t3.length > 2)
          t3.length === S.length && (K(t3.split("")), null == o || o(t3));
        else {
          if (2 === t3.length) {
            var u2 = S[e2];
            if (u2 === t3[0])
              t3 = t3[1];
            else {
              if (u2 !== t3[1])
                return;
              t3 = t3[0];
            }
          }
          var r2 = S.slice();
          if (r2[e2] = t3, K(r2), t3 && (r2.includes("") || null == o || o(r2.join("")), e2 !== S.length - 1))
            if (j) {
              var l2 = r2.findIndex(function(e3) {
                return !e3;
              });
              -1 !== l2 && D(l2);
            } else
              D(e2 + 1);
        }
    };
  }, [$, S, K, o, D, j]), P = e.useCallback(function(e2) {
    return function(n2) {
      "Backspace" === n2.key && !S[e2] && e2 && D(e2 - 1);
    };
  }, [S, D]), U = e.useCallback(function(e2) {
    var n2 = (void 0 === e2 ? {} : e2).focus, t3 = void 0 !== n2 && n2;
    K(Array(S.length).fill("")), t3 ? D() : E();
  }, [K, S, D, E]), V = e.useCallback(function(e2) {
    return function() {
      B(e2);
    };
  }, []), q = e.useCallback(function() {
    B(-1);
  }, []), G = -1 !== I;
  return { fields: S.map(function(e2, t3) {
    return n({ ref: H(t3), value: e2, disabled: k, autoComplete: b ? "one-time-code" : "off", inputMode: $ ? "text" : "numeric", type: y ? "password" : "text", placeholder: G ? "" : C }, !k && { onBlur: q, onFocus: V(t3), onChange: M(t3), onKeyDown: P(t3) });
  }), clear: U, isFocused: G };
}
export {
  t as usePinInput
};
//# sourceMappingURL=react-pin-input-hook.js.map
