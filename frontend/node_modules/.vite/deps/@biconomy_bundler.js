import {
  require_src as require_src2,
  require_utils
} from "./chunk-GL4ZGVOU.js";
import "./chunk-3PGKTKGY.js";
import {
  require_src
} from "./chunk-NBNL52O7.js";
import {
  init_lib7 as init_lib2,
  lib_exports7 as lib_exports2
} from "./chunk-SI3342XM.js";
import {
  init_lib20 as init_lib,
  lib_exports17 as lib_exports
} from "./chunk-3KD3TUYK.js";
import "./chunk-F66VBKRH.js";
import {
  __commonJS,
  __toCommonJS,
  init_buffer,
  init_process
} from "./chunk-3V4EFXE5.js";

// node_modules/@biconomy/bundler/dist/src/interfaces/IBundler.js
var require_IBundler = __commonJS({
  "node_modules/@biconomy/bundler/dist/src/interfaces/IBundler.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@biconomy/bundler/dist/src/utils/HelperFunction.js
var require_HelperFunction = __commonJS({
  "node_modules/@biconomy/bundler/dist/src/utils/HelperFunction.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transformUserOP = void 0;
    var ethers_1 = (init_lib2(), __toCommonJS(lib_exports2));
    var transformUserOP = (userOp) => {
      try {
        const userOperation = { ...userOp };
        const keys = [
          "nonce",
          "callGasLimit",
          "verificationGasLimit",
          "preVerificationGas",
          "maxFeePerGas",
          "maxPriorityFeePerGas"
        ];
        for (const key of keys) {
          if (userOperation[key] && userOperation[key] !== "0") {
            userOperation[key] = ethers_1.BigNumber.from(userOp[key]).toHexString();
          }
        }
        return userOperation;
      } catch (error) {
        console.error(`Failed to transform user operation: ${error}`);
        throw error;
      }
    };
    exports.transformUserOP = transformUserOP;
  }
});

// node_modules/@biconomy/bundler/dist/src/utils/Constants.js
var require_Constants = __commonJS({
  "node_modules/@biconomy/bundler/dist/src/utils/Constants.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UserOpReceiptIntervals = void 0;
    var core_types_1 = require_src();
    exports.UserOpReceiptIntervals = {
      [core_types_1.ChainId.MAINNET]: 1e4,
      [core_types_1.ChainId.GOERLI]: 5e3,
      [core_types_1.ChainId.POLYGON_MUMBAI]: 5e3,
      [core_types_1.ChainId.POLYGON_MAINNET]: 5e3,
      [core_types_1.ChainId.BSC_TESTNET]: 5e3,
      [core_types_1.ChainId.BSC_MAINNET]: 5e3,
      [core_types_1.ChainId.POLYGON_ZKEVM_TESTNET]: 5e3,
      [core_types_1.ChainId.POLYGON_ZKEVM_MAINNET]: 5e3,
      [core_types_1.ChainId.ARBITRUM_GOERLI_TESTNET]: 5e3,
      [core_types_1.ChainId.ARBITRUM_ONE_MAINNET]: 5e3,
      [core_types_1.ChainId.ARBITRUM_NOVA_MAINNET]: 5e3,
      [core_types_1.ChainId.OPTIMISM_MAINNET]: 5e3,
      [core_types_1.ChainId.OPTIMISM_GOERLI_TESTNET]: 5e3,
      [core_types_1.ChainId.AVALANCHE_MAINNET]: 5e3,
      [core_types_1.ChainId.AVALANCHE_TESTNET]: 5e3,
      [core_types_1.ChainId.MOONBEAM_MAINNET]: 5e3,
      [core_types_1.ChainId.BASE_GOERLI_TESTNET]: 5e3,
      [core_types_1.ChainId.LINEA_TESTNET]: 5e3
    };
  }
});

// node_modules/@biconomy/bundler/dist/src/Bundler.js
var require_Bundler = __commonJS({
  "node_modules/@biconomy/bundler/dist/src/Bundler.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Bundler = void 0;
    var utils_1 = require_utils();
    var common_1 = require_src2();
    var HelperFunction_1 = require_HelperFunction();
    var Constants_1 = require_Constants();
    var providers_1 = (init_lib(), __toCommonJS(lib_exports));
    var Bundler = class {
      constructor(bundlerConfig) {
        this.bundlerConfig = bundlerConfig;
        this.UserOpReceiptIntervals = {
          ...Constants_1.UserOpReceiptIntervals,
          ...bundlerConfig.userOpReceiptIntervals
        };
      }
      getBundlerUrl() {
        return `${this.bundlerConfig.bundlerUrl}`;
      }
      /**
       *
       * @param chainId
       * @description This function will fetch gasPrices from bundler
       * @returns Promise<UserOpGasPricesResponse>
       */
      async estimateUserOpGas(userOp) {
        userOp = (0, HelperFunction_1.transformUserOP)(userOp);
        common_1.Logger.log("userOp sending for fee estimate ", userOp);
        const bundlerUrl = this.getBundlerUrl();
        const response = await (0, common_1.sendRequest)({
          url: bundlerUrl,
          method: common_1.HttpMethod.Post,
          body: {
            method: "eth_estimateUserOperationGas",
            params: [userOp, this.bundlerConfig.entryPointAddress],
            id: (0, common_1.getTimestampInSeconds)(),
            jsonrpc: "2.0"
          }
        });
        const userOpGasResponse = response.result;
        for (const key in userOpGasResponse) {
          if (key === "maxFeePerGas" || key === "maxPriorityFeePerGas")
            continue;
          if (!userOpGasResponse[key]) {
            throw new Error(`Got undefined ${key} from bundler`);
          }
        }
        return userOpGasResponse;
      }
      /**
       *
       * @param userOp
       * @description This function will send signed userOp to bundler to get mined on chain
       * @returns Promise<UserOpResponse>
       */
      async sendUserOp(userOp) {
        const chainId = this.bundlerConfig.chainId;
        userOp = (0, HelperFunction_1.transformUserOP)(userOp);
        const hexifiedUserOp = (0, common_1.deepHexlify)(await (0, utils_1.resolveProperties)(userOp));
        const params = [hexifiedUserOp, this.bundlerConfig.entryPointAddress];
        const bundlerUrl = this.getBundlerUrl();
        const sendUserOperationResponse = await (0, common_1.sendRequest)({
          url: bundlerUrl,
          method: common_1.HttpMethod.Post,
          body: {
            method: "eth_sendUserOperation",
            params,
            id: (0, common_1.getTimestampInSeconds)(),
            jsonrpc: "2.0"
          }
        });
        const response = {
          userOpHash: sendUserOperationResponse.result,
          wait: (confirmations) => {
            const provider = new providers_1.JsonRpcProvider(common_1.RPC_PROVIDER_URLS[chainId]);
            return new Promise(async (resolve, reject) => {
              const intervalId = setInterval(async () => {
                try {
                  const userOpResponse = await this.getUserOpReceipt(sendUserOperationResponse.result);
                  if (userOpResponse && userOpResponse.receipt && userOpResponse.receipt.blockNumber) {
                    if (confirmations) {
                      const latestBlock = await provider.getBlockNumber();
                      const confirmedBlocks = latestBlock - userOpResponse.receipt.blockNumber;
                      if (confirmations >= confirmedBlocks) {
                        clearInterval(intervalId);
                        resolve(userOpResponse);
                      }
                    }
                    clearInterval(intervalId);
                    resolve(userOpResponse);
                  }
                } catch (error) {
                  clearInterval(intervalId);
                  reject(error);
                }
              }, this.UserOpReceiptIntervals[chainId]);
            });
          }
        };
        return response;
      }
      /**
       *
       * @param userOpHash
       * @description This function will return userOpReceipt for a given userOpHash
       * @returns Promise<UserOpReceipt>
       */
      async getUserOpReceipt(userOpHash) {
        const bundlerUrl = this.getBundlerUrl();
        const response = await (0, common_1.sendRequest)({
          url: bundlerUrl,
          method: common_1.HttpMethod.Post,
          body: {
            method: "eth_getUserOperationReceipt",
            params: [userOpHash],
            id: (0, common_1.getTimestampInSeconds)(),
            jsonrpc: "2.0"
          }
        });
        const userOpReceipt = response.result;
        return userOpReceipt;
      }
      /**
       *
       * @param userOpHash
       * @param chainId
       * @description this function will return UserOpByHashResponse for given UserOpHash
       * @returns Promise<UserOpByHashResponse>
       */
      async getUserOpByHash(userOpHash) {
        const bundlerUrl = this.getBundlerUrl();
        const response = await (0, common_1.sendRequest)({
          url: bundlerUrl,
          method: common_1.HttpMethod.Post,
          body: {
            method: "eth_getUserOperationByHash",
            params: [userOpHash],
            id: (0, common_1.getTimestampInSeconds)(),
            jsonrpc: "2.0"
          }
        });
        const userOpByHashResponse = response.result;
        return userOpByHashResponse;
      }
    };
    exports.Bundler = Bundler;
  }
});

// node_modules/@biconomy/bundler/dist/src/utils/Types.js
var require_Types = __commonJS({
  "node_modules/@biconomy/bundler/dist/src/utils/Types.js"(exports) {
    "use strict";
    init_process();
    init_buffer();
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@biconomy/bundler/dist/src/index.js
var require_src3 = __commonJS({
  "node_modules/@biconomy/bundler/dist/src/index.js"(exports) {
    init_process();
    init_buffer();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IBundler(), exports);
    __exportStar(require_Bundler(), exports);
    __exportStar(require_Types(), exports);
  }
});
export default require_src3();
//# sourceMappingURL=@biconomy_bundler.js.map
