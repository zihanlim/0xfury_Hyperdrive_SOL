/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccount__factory>;
    getContractFactory(
      name: "IAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregator__factory>;
    getContractFactory(
      name: "IEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntryPoint__factory>;
    getContractFactory(
      name: "INonceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonceManager__factory>;
    getContractFactory(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymaster__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "IERC777Recipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Recipient__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BaseAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAccount__factory>;
    getContractFactory(
      name: "BasePaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePaymaster__factory>;
    getContractFactory(
      name: "EntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EntryPoint__factory>;
    getContractFactory(
      name: "NonceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonceManager__factory>;
    getContractFactory(
      name: "SenderCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SenderCreator__factory>;
    getContractFactory(
      name: "StakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeManager__factory>;
    getContractFactory(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccount__factory>;
    getContractFactory(
      name: "IAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregator__factory>;
    getContractFactory(
      name: "IEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntryPoint__factory>;
    getContractFactory(
      name: "INonceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonceManager__factory>;
    getContractFactory(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymaster__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "TokenCallbackHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenCallbackHandler__factory>;
    getContractFactory(
      name: "DepositPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositPaymaster__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "SimpleAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleAccount__factory>;
    getContractFactory(
      name: "SimpleAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleAccountFactory__factory>;
    getContractFactory(
      name: "TokenPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenPaymaster__factory>;
    getContractFactory(
      name: "VerifyingPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyingPaymaster__factory>;
    getContractFactory(
      name: "MaliciousAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaliciousAccount__factory>;
    getContractFactory(
      name: "TestAggregatedAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAggregatedAccount__factory>;
    getContractFactory(
      name: "TestAggregatedAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAggregatedAccountFactory__factory>;
    getContractFactory(
      name: "TestCounter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCounter__factory>;
    getContractFactory(
      name: "TestExpirePaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestExpirePaymaster__factory>;
    getContractFactory(
      name: "TestExpiryAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestExpiryAccount__factory>;
    getContractFactory(
      name: "TestOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestOracle__factory>;
    getContractFactory(
      name: "TestPaymasterAcceptAll",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPaymasterAcceptAll__factory>;
    getContractFactory(
      name: "TestRevertAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRevertAccount__factory>;
    getContractFactory(
      name: "TestSignatureAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestSignatureAggregator__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "TestUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUtil__factory>;
    getContractFactory(
      name: "TestWarmColdAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestWarmColdAccount__factory>;
    getContractFactory(
      name: "Executor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Executor__factory>;
    getContractFactory(
      name: "FallbackManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FallbackManager__factory>;
    getContractFactory(
      name: "ModuleManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleManager__factory>;
    getContractFactory(
      name: "BaseSmartAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseSmartAccount__factory>;
    getContractFactory(
      name: "BaseSmartAccountErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseSmartAccountErrors__factory>;
    getContractFactory(
      name: "FallbackManagerErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FallbackManagerErrors__factory>;
    getContractFactory(
      name: "ModuleManagerErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleManagerErrors__factory>;
    getContractFactory(
      name: "SelfAuthorizedErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelfAuthorizedErrors__factory>;
    getContractFactory(
      name: "SingletonPaymasterErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingletonPaymasterErrors__factory>;
    getContractFactory(
      name: "SmartAccountErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccountErrors__factory>;
    getContractFactory(
      name: "SmartAccountFactoryErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccountFactoryErrors__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "SelfAuthorized",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelfAuthorized__factory>;
    getContractFactory(
      name: "Create3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create3__factory>;
    getContractFactory(
      name: "Deployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Deployer__factory>;
    getContractFactory(
      name: "DefaultCallbackHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefaultCallbackHandler__factory>;
    getContractFactory(
      name: "IERC1155TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155TokenReceiver__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC721TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721TokenReceiver__factory>;
    getContractFactory(
      name: "IERC777TokensRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777TokensRecipient__factory>;
    getContractFactory(
      name: "IModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModule__factory>;
    getContractFactory(
      name: "ISignatureValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignatureValidator__factory>;
    getContractFactory(
      name: "MultiSend",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSend__factory>;
    getContractFactory(
      name: "MultiSendCallOnly",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSendCallOnly__factory>;
    getContractFactory(
      name: "BasePaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePaymaster__factory>;
    getContractFactory(
      name: "VerifyingSingletonPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyingSingletonPaymaster__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "SmartAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccount__factory>;
    getContractFactory(
      name: "SmartAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccountFactory__factory>;
    getContractFactory(
      name: "SmartAccountNoAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccountNoAuth__factory>;
    getContractFactory(
      name: "Button",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Button__factory>;
    getContractFactory(
      name: "FakeSigner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeSigner__factory>;
    getContractFactory(
      name: "SelfDestructingContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelfDestructingContract__factory>;
    getContractFactory(
      name: "MaliciousAccount2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaliciousAccount2__factory>;
    getContractFactory(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: "SocialRecoveryModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SocialRecoveryModule__factory>;
    getContractFactory(
      name: "StakedTestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedTestToken__factory>;
    getContractFactory(
      name: "StorageSetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StorageSetter__factory>;
    getContractFactory(
      name: "TestIncreaseNonceLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestIncreaseNonceLib__factory>;
    getContractFactory(
      name: "Upgrader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Upgrader__factory>;
    getContractFactory(
      name: "BaseSmartAccountNew",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseSmartAccountNew__factory>;
    getContractFactory(
      name: "DelegateCallTransactionGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegateCallTransactionGuard__factory>;
    getContractFactory(
      name: "BaseGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseGuard__factory>;
    getContractFactory(
      name: "Guard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Guard__factory>;
    getContractFactory(
      name: "GuardManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GuardManager__factory>;
    getContractFactory(
      name: "ModuleManagerNew",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleManagerNew__factory>;
    getContractFactory(
      name: "SmartAccount10",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccount10__factory>;
    getContractFactory(
      name: "SmartAccount11",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccount11__factory>;
    getContractFactory(
      name: "SmartAccount12Guard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccount12Guard__factory>;
    getContractFactory(
      name: "SmartAccount2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccount2__factory>;
    getContractFactory(
      name: "SmartAccount3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccount3__factory>;
    getContractFactory(
      name: "SmartAccount4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccount4__factory>;
    getContractFactory(
      name: "SmartAccount5",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccount5__factory>;
    getContractFactory(
      name: "SmartAccount6",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccount6__factory>;
    getContractFactory(
      name: "SmartAccount7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccount7__factory>;
    getContractFactory(
      name: "SmartAccount9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartAccount9__factory>;
    getContractFactory(
      name: "WhitelistModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitelistModule__factory>;
    getContractFactory(
      name: "Decoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Decoder__factory>;
    getContractFactory(
      name: "GasEstimator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasEstimator__factory>;
    getContractFactory(
      name: "GasEstimatorSmartAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasEstimatorSmartAccount__factory>;

    getContractAt(
      name: "IAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccount>;
    getContractAt(
      name: "IAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregator>;
    getContractAt(
      name: "IEntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntryPoint>;
    getContractAt(
      name: "INonceManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INonceManager>;
    getContractAt(
      name: "IPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymaster>;
    getContractAt(
      name: "IStakeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "IERC777Recipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Recipient>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BaseAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAccount>;
    getContractAt(
      name: "BasePaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePaymaster>;
    getContractAt(
      name: "EntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EntryPoint>;
    getContractAt(
      name: "NonceManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonceManager>;
    getContractAt(
      name: "SenderCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SenderCreator>;
    getContractAt(
      name: "StakeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeManager>;
    getContractAt(
      name: "IAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccount>;
    getContractAt(
      name: "IAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregator>;
    getContractAt(
      name: "IEntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntryPoint>;
    getContractAt(
      name: "INonceManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INonceManager>;
    getContractAt(
      name: "IPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymaster>;
    getContractAt(
      name: "IStakeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "TokenCallbackHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenCallbackHandler>;
    getContractAt(
      name: "DepositPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositPaymaster>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "SimpleAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleAccount>;
    getContractAt(
      name: "SimpleAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleAccountFactory>;
    getContractAt(
      name: "TokenPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenPaymaster>;
    getContractAt(
      name: "VerifyingPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyingPaymaster>;
    getContractAt(
      name: "MaliciousAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MaliciousAccount>;
    getContractAt(
      name: "TestAggregatedAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAggregatedAccount>;
    getContractAt(
      name: "TestAggregatedAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAggregatedAccountFactory>;
    getContractAt(
      name: "TestCounter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCounter>;
    getContractAt(
      name: "TestExpirePaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestExpirePaymaster>;
    getContractAt(
      name: "TestExpiryAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestExpiryAccount>;
    getContractAt(
      name: "TestOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestOracle>;
    getContractAt(
      name: "TestPaymasterAcceptAll",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPaymasterAcceptAll>;
    getContractAt(
      name: "TestRevertAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRevertAccount>;
    getContractAt(
      name: "TestSignatureAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestSignatureAggregator>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "TestUtil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUtil>;
    getContractAt(
      name: "TestWarmColdAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestWarmColdAccount>;
    getContractAt(
      name: "Executor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Executor>;
    getContractAt(
      name: "FallbackManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FallbackManager>;
    getContractAt(
      name: "ModuleManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleManager>;
    getContractAt(
      name: "BaseSmartAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseSmartAccount>;
    getContractAt(
      name: "BaseSmartAccountErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseSmartAccountErrors>;
    getContractAt(
      name: "FallbackManagerErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FallbackManagerErrors>;
    getContractAt(
      name: "ModuleManagerErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleManagerErrors>;
    getContractAt(
      name: "SelfAuthorizedErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SelfAuthorizedErrors>;
    getContractAt(
      name: "SingletonPaymasterErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SingletonPaymasterErrors>;
    getContractAt(
      name: "SmartAccountErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccountErrors>;
    getContractAt(
      name: "SmartAccountFactoryErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccountFactoryErrors>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "SelfAuthorized",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SelfAuthorized>;
    getContractAt(
      name: "Create3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Create3>;
    getContractAt(
      name: "Deployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Deployer>;
    getContractAt(
      name: "DefaultCallbackHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefaultCallbackHandler>;
    getContractAt(
      name: "IERC1155TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155TokenReceiver>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC721TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721TokenReceiver>;
    getContractAt(
      name: "IERC777TokensRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777TokensRecipient>;
    getContractAt(
      name: "IModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModule>;
    getContractAt(
      name: "ISignatureValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignatureValidator>;
    getContractAt(
      name: "MultiSend",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSend>;
    getContractAt(
      name: "MultiSendCallOnly",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSendCallOnly>;
    getContractAt(
      name: "BasePaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePaymaster>;
    getContractAt(
      name: "VerifyingSingletonPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyingSingletonPaymaster>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "SmartAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccount>;
    getContractAt(
      name: "SmartAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccountFactory>;
    getContractAt(
      name: "SmartAccountNoAuth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccountNoAuth>;
    getContractAt(
      name: "Button",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Button>;
    getContractAt(
      name: "FakeSigner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeSigner>;
    getContractAt(
      name: "SelfDestructingContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SelfDestructingContract>;
    getContractAt(
      name: "MaliciousAccount2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MaliciousAccount2>;
    getContractAt(
      name: "MockToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockToken>;
    getContractAt(
      name: "SocialRecoveryModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SocialRecoveryModule>;
    getContractAt(
      name: "StakedTestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakedTestToken>;
    getContractAt(
      name: "StorageSetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StorageSetter>;
    getContractAt(
      name: "TestIncreaseNonceLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestIncreaseNonceLib>;
    getContractAt(
      name: "Upgrader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Upgrader>;
    getContractAt(
      name: "BaseSmartAccountNew",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseSmartAccountNew>;
    getContractAt(
      name: "DelegateCallTransactionGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegateCallTransactionGuard>;
    getContractAt(
      name: "BaseGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseGuard>;
    getContractAt(
      name: "Guard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Guard>;
    getContractAt(
      name: "GuardManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GuardManager>;
    getContractAt(
      name: "ModuleManagerNew",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleManagerNew>;
    getContractAt(
      name: "SmartAccount10",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccount10>;
    getContractAt(
      name: "SmartAccount11",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccount11>;
    getContractAt(
      name: "SmartAccount12Guard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccount12Guard>;
    getContractAt(
      name: "SmartAccount2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccount2>;
    getContractAt(
      name: "SmartAccount3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccount3>;
    getContractAt(
      name: "SmartAccount4",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccount4>;
    getContractAt(
      name: "SmartAccount5",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccount5>;
    getContractAt(
      name: "SmartAccount6",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccount6>;
    getContractAt(
      name: "SmartAccount7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccount7>;
    getContractAt(
      name: "SmartAccount9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartAccount9>;
    getContractAt(
      name: "WhitelistModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitelistModule>;
    getContractAt(
      name: "Decoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Decoder>;
    getContractAt(
      name: "GasEstimator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GasEstimator>;
    getContractAt(
      name: "GasEstimatorSmartAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GasEstimatorSmartAccount>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
