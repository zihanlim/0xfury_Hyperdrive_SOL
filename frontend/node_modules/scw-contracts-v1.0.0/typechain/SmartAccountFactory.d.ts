/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SmartAccountFactoryInterface extends ethers.utils.Interface {
  functions: {
    "accountCreationCode()": FunctionFragment;
    "basicImplementation()": FunctionFragment;
    "deployAccount(address)": FunctionFragment;
    "deployCounterFactualAccount(address,uint256)": FunctionFragment;
    "getAddressForCounterFactualAccount(address,uint256)": FunctionFragment;
    "minimalHandler()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "basicImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployCounterFactualAccount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressForCounterFactualAccount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimalHandler",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "basicImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCounterFactualAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressForCounterFactualAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimalHandler",
    data: BytesLike
  ): Result;

  events: {
    "AccountCreation(address,address,uint256)": EventFragment;
    "AccountCreationWithoutIndex(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCreation"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AccountCreationWithoutIndex"
  ): EventFragment;
}

export type AccountCreationEvent = TypedEvent<
  [string, string, BigNumber] & {
    account: string;
    owner: string;
    index: BigNumber;
  }
>;

export type AccountCreationWithoutIndexEvent = TypedEvent<
  [string, string] & { account: string; owner: string }
>;

export class SmartAccountFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SmartAccountFactoryInterface;

  functions: {
    accountCreationCode(overrides?: CallOverrides): Promise<[string]>;

    basicImplementation(overrides?: CallOverrides): Promise<[string]>;

    deployAccount(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployCounterFactualAccount(
      _owner: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAddressForCounterFactualAccount(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _account: string }>;

    minimalHandler(overrides?: CallOverrides): Promise<[string]>;
  };

  accountCreationCode(overrides?: CallOverrides): Promise<string>;

  basicImplementation(overrides?: CallOverrides): Promise<string>;

  deployAccount(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployCounterFactualAccount(
    _owner: string,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAddressForCounterFactualAccount(
    _owner: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  minimalHandler(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accountCreationCode(overrides?: CallOverrides): Promise<string>;

    basicImplementation(overrides?: CallOverrides): Promise<string>;

    deployAccount(_owner: string, overrides?: CallOverrides): Promise<string>;

    deployCounterFactualAccount(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddressForCounterFactualAccount(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    minimalHandler(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AccountCreation(address,address,uint256)"(
      account?: string | null,
      owner?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; owner: string; index: BigNumber }
    >;

    AccountCreation(
      account?: string | null,
      owner?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; owner: string; index: BigNumber }
    >;

    "AccountCreationWithoutIndex(address,address)"(
      account?: string | null,
      owner?: string | null
    ): TypedEventFilter<[string, string], { account: string; owner: string }>;

    AccountCreationWithoutIndex(
      account?: string | null,
      owner?: string | null
    ): TypedEventFilter<[string, string], { account: string; owner: string }>;
  };

  estimateGas: {
    accountCreationCode(overrides?: CallOverrides): Promise<BigNumber>;

    basicImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    deployAccount(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployCounterFactualAccount(
      _owner: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAddressForCounterFactualAccount(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimalHandler(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountCreationCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    basicImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployAccount(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployCounterFactualAccount(
      _owner: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAddressForCounterFactualAccount(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimalHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
