/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SmartAccount11Interface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "addDeposit()": FunctionFragment;
    "checkSignatures(bytes32,bytes)": FunctionFragment;
    "disableModule(address,address)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "enableModule(address)": FunctionFragment;
    "encodeTransactionData((address,uint8,uint256,bytes,uint256),(uint256,uint256,uint256,address,address),uint256)": FunctionFragment;
    "entryPoint()": FunctionFragment;
    "execTransaction((address,uint8,uint256,bytes,uint256),(uint256,uint256,uint256,address,address),bytes)": FunctionFragment;
    "execTransactionFromModule(address,uint256,bytes,uint8)": FunctionFragment;
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": FunctionFragment;
    "execTransaction_S6W((address,uint8,uint256,bytes,uint256),(uint256,uint256,uint256,address,address),bytes)": FunctionFragment;
    "executeBatchCall(address[],uint256[],bytes[])": FunctionFragment;
    "executeCall(address,uint256,bytes)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getDeposit()": FunctionFragment;
    "getFallbackHandler()": FunctionFragment;
    "getImplementation()": FunctionFragment;
    "getModulesPaginated(address,uint256)": FunctionFragment;
    "getNonce(uint256)": FunctionFragment;
    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,uint256,address,address,uint256)": FunctionFragment;
    "handlePaymentRevert(uint256,uint256,uint256,uint256,address,address)": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "isModuleEnabled(address)": FunctionFragment;
    "nonce()": FunctionFragment;
    "nonces(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pullTokens(address,address,uint256)": FunctionFragment;
    "requiredTxGas(address,uint256,bytes,uint8)": FunctionFragment;
    "setFallbackHandler(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "signedMessages(bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "updateImplementation(address)": FunctionFragment;
    "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": FunctionFragment;
    "withdrawDepositTo(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatures",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransactionData",
    values: [
      {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execTransaction",
    values: [
      {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransaction_S6W",
    values: [
      {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatchCall",
    values: [string[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCall",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFallbackHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handlePaymentRevert",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleEnabled",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pullTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredTxGas",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackHandler",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "signedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [
      {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDepositTo",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransactionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransaction_S6W",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBatchCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlePaymentRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pullTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requiredTxGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDepositTo",
    data: BytesLike
  ): Result;

  events: {
    "AccountHandlePayment(bytes32,uint256)": EventFragment;
    "ChangedFallbackHandler(address,address)": EventFragment;
    "DisabledModule(address)": EventFragment;
    "EOAChanged(address,address,address)": EventFragment;
    "EnabledModule(address)": EventFragment;
    "ExecutionFailure(address,uint256,bytes,uint8,uint256)": EventFragment;
    "ExecutionFromModuleFailure(address)": EventFragment;
    "ExecutionFromModuleSuccess(address)": EventFragment;
    "ExecutionSuccess(address,uint256,bytes,uint8,uint256)": EventFragment;
    "ImplementationUpdated(address,address)": EventFragment;
    "ModuleTransaction(address,address,uint256,bytes,uint8)": EventFragment;
    "SmartAccountReceivedNativeToken(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountHandlePayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedFallbackHandler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EOAChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImplementationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleTransaction"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SmartAccountReceivedNativeToken"
  ): EventFragment;
}

export type AccountHandlePaymentEvent = TypedEvent<
  [string, BigNumber] & { txHash: string; payment: BigNumber }
>;

export type ChangedFallbackHandlerEvent = TypedEvent<
  [string, string] & { previousHandler: string; handler: string }
>;

export type DisabledModuleEvent = TypedEvent<[string] & { module: string }>;

export type EOAChangedEvent = TypedEvent<
  [string, string, string] & { _scw: string; _oldEOA: string; _newEOA: string }
>;

export type EnabledModuleEvent = TypedEvent<[string] & { module: string }>;

export type ExecutionFailureEvent = TypedEvent<
  [string, BigNumber, string, number, BigNumber] & {
    to: string;
    value: BigNumber;
    data: string;
    operation: number;
    txGas: BigNumber;
  }
>;

export type ExecutionFromModuleFailureEvent = TypedEvent<
  [string] & { module: string }
>;

export type ExecutionFromModuleSuccessEvent = TypedEvent<
  [string] & { module: string }
>;

export type ExecutionSuccessEvent = TypedEvent<
  [string, BigNumber, string, number, BigNumber] & {
    to: string;
    value: BigNumber;
    data: string;
    operation: number;
    txGas: BigNumber;
  }
>;

export type ImplementationUpdatedEvent = TypedEvent<
  [string, string] & { oldImplementation: string; newImplementation: string }
>;

export type ModuleTransactionEvent = TypedEvent<
  [string, string, BigNumber, string, number] & {
    module: string;
    to: string;
    value: BigNumber;
    data: string;
    operation: number;
  }
>;

export type SmartAccountReceivedNativeTokenEvent = TypedEvent<
  [string, BigNumber] & { sender: string; value: BigNumber }
>;

export class SmartAccount11 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SmartAccount11Interface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkSignatures(
      dataHash: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    encodeTransactionData(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    entryPoint(overrides?: CallOverrides): Promise<[string]>;

    execTransaction(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execTransaction_S6W(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeBatchCall(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeCall(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFallbackHandler(
      overrides?: CallOverrides
    ): Promise<[string] & { _handler: string }>;

    getImplementation(
      overrides?: CallOverrides
    ): Promise<[string] & { _implementation: string }>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    getNonce(
      batchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      targetTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      tokenGasPriceFactor: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    handlePaymentRevert(
      gasUsed: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      tokenGasPriceFactor: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _owner: string,
      _handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pullTokens(
      token: string,
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transfer(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawDepositTo(
      withdrawAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  addDeposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkSignatures(
    dataHash: BytesLike,
    signatures: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  disableModule(
    prevModule: string,
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  enableModule(
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  encodeTransactionData(
    _tx: {
      to: string;
      operation: BigNumberish;
      value: BigNumberish;
      data: BytesLike;
      targetTxGas: BigNumberish;
    },
    refundInfo: {
      baseGas: BigNumberish;
      gasPrice: BigNumberish;
      tokenGasPriceFactor: BigNumberish;
      gasToken: string;
      refundReceiver: string;
    },
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  entryPoint(overrides?: CallOverrides): Promise<string>;

  execTransaction(
    _tx: {
      to: string;
      operation: BigNumberish;
      value: BigNumberish;
      data: BytesLike;
      targetTxGas: BigNumberish;
    },
    refundInfo: {
      baseGas: BigNumberish;
      gasPrice: BigNumberish;
      tokenGasPriceFactor: BigNumberish;
      gasToken: string;
      refundReceiver: string;
    },
    signatures: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execTransaction_S6W(
    _tx: {
      to: string;
      operation: BigNumberish;
      value: BigNumberish;
      data: BytesLike;
      targetTxGas: BigNumberish;
    },
    refundInfo: {
      baseGas: BigNumberish;
      gasPrice: BigNumberish;
      tokenGasPriceFactor: BigNumberish;
      gasToken: string;
      refundReceiver: string;
    },
    signatures: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeBatchCall(
    dest: string[],
    value: BigNumberish[],
    func: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeCall(
    dest: string,
    value: BigNumberish,
    func: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  getFallbackHandler(overrides?: CallOverrides): Promise<string>;

  getImplementation(overrides?: CallOverrides): Promise<string>;

  getModulesPaginated(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>;

  getNonce(
    batchId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTransactionHash(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    targetTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    tokenGasPriceFactor: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  handlePaymentRevert(
    gasUsed: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    tokenGasPriceFactor: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _owner: string,
    _handler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isModuleEnabled(module: string, overrides?: CallOverrides): Promise<boolean>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pullTokens(
    token: string,
    dest: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requiredTxGas(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFallbackHandler(
    handler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signedMessages(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transfer(
    dest: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateImplementation(
    _implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateUserOp(
    userOp: {
      sender: string;
      nonce: BigNumberish;
      initCode: BytesLike;
      callData: BytesLike;
      callGasLimit: BigNumberish;
      verificationGasLimit: BigNumberish;
      preVerificationGas: BigNumberish;
      maxFeePerGas: BigNumberish;
      maxPriorityFeePerGas: BigNumberish;
      paymasterAndData: BytesLike;
      signature: BytesLike;
    },
    userOpHash: BytesLike,
    missingAccountFunds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawDepositTo(
    withdrawAddress: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    addDeposit(overrides?: CallOverrides): Promise<void>;

    checkSignatures(
      dataHash: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    enableModule(module: string, overrides?: CallOverrides): Promise<void>;

    encodeTransactionData(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    entryPoint(overrides?: CallOverrides): Promise<string>;

    execTransaction(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    execTransaction_S6W(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeBatchCall(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeCall(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackHandler(overrides?: CallOverrides): Promise<string>;

    getImplementation(overrides?: CallOverrides): Promise<string>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    getNonce(
      batchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      targetTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      tokenGasPriceFactor: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    handlePaymentRevert(
      gasUsed: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      tokenGasPriceFactor: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _owner: string,
      _handler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pullTokens(
      token: string,
      dest: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFallbackHandler(
      handler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transfer(
      dest: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateImplementation(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawDepositTo(
      withdrawAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountHandlePayment(bytes32,uint256)"(
      txHash?: BytesLike | null,
      payment?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { txHash: string; payment: BigNumber }
    >;

    AccountHandlePayment(
      txHash?: BytesLike | null,
      payment?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { txHash: string; payment: BigNumber }
    >;

    "ChangedFallbackHandler(address,address)"(
      previousHandler?: string | null,
      handler?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousHandler: string; handler: string }
    >;

    ChangedFallbackHandler(
      previousHandler?: string | null,
      handler?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousHandler: string; handler: string }
    >;

    "DisabledModule(address)"(
      module?: null
    ): TypedEventFilter<[string], { module: string }>;

    DisabledModule(
      module?: null
    ): TypedEventFilter<[string], { module: string }>;

    "EOAChanged(address,address,address)"(
      _scw?: string | null,
      _oldEOA?: string | null,
      _newEOA?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _scw: string; _oldEOA: string; _newEOA: string }
    >;

    EOAChanged(
      _scw?: string | null,
      _oldEOA?: string | null,
      _newEOA?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _scw: string; _oldEOA: string; _newEOA: string }
    >;

    "EnabledModule(address)"(
      module?: null
    ): TypedEventFilter<[string], { module: string }>;

    EnabledModule(
      module?: null
    ): TypedEventFilter<[string], { module: string }>;

    "ExecutionFailure(address,uint256,bytes,uint8,uint256)"(
      to?: string | null,
      value?: BigNumberish | null,
      data?: BytesLike | null,
      operation?: null,
      txGas?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number, BigNumber],
      {
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
        txGas: BigNumber;
      }
    >;

    ExecutionFailure(
      to?: string | null,
      value?: BigNumberish | null,
      data?: BytesLike | null,
      operation?: null,
      txGas?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number, BigNumber],
      {
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
        txGas: BigNumber;
      }
    >;

    "ExecutionFromModuleFailure(address)"(
      module?: string | null
    ): TypedEventFilter<[string], { module: string }>;

    ExecutionFromModuleFailure(
      module?: string | null
    ): TypedEventFilter<[string], { module: string }>;

    "ExecutionFromModuleSuccess(address)"(
      module?: string | null
    ): TypedEventFilter<[string], { module: string }>;

    ExecutionFromModuleSuccess(
      module?: string | null
    ): TypedEventFilter<[string], { module: string }>;

    "ExecutionSuccess(address,uint256,bytes,uint8,uint256)"(
      to?: string | null,
      value?: BigNumberish | null,
      data?: BytesLike | null,
      operation?: null,
      txGas?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number, BigNumber],
      {
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
        txGas: BigNumber;
      }
    >;

    ExecutionSuccess(
      to?: string | null,
      value?: BigNumberish | null,
      data?: BytesLike | null,
      operation?: null,
      txGas?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number, BigNumber],
      {
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
        txGas: BigNumber;
      }
    >;

    "ImplementationUpdated(address,address)"(
      oldImplementation?: string | null,
      newImplementation?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldImplementation: string; newImplementation: string }
    >;

    ImplementationUpdated(
      oldImplementation?: string | null,
      newImplementation?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldImplementation: string; newImplementation: string }
    >;

    "ModuleTransaction(address,address,uint256,bytes,uint8)"(
      module?: null,
      to?: null,
      value?: null,
      data?: null,
      operation?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, number],
      {
        module: string;
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
      }
    >;

    ModuleTransaction(
      module?: null,
      to?: null,
      value?: null,
      data?: null,
      operation?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, number],
      {
        module: string;
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
      }
    >;

    "SmartAccountReceivedNativeToken(address,uint256)"(
      sender?: string | null,
      value?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; value: BigNumber }
    >;

    SmartAccountReceivedNativeToken(
      sender?: string | null,
      value?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; value: BigNumber }
    >;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkSignatures(
      dataHash: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    encodeTransactionData(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entryPoint(overrides?: CallOverrides): Promise<BigNumber>;

    execTransaction(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execTransaction_S6W(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeBatchCall(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeCall(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    getFallbackHandler(overrides?: CallOverrides): Promise<BigNumber>;

    getImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      batchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      targetTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      tokenGasPriceFactor: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handlePaymentRevert(
      gasUsed: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      tokenGasPriceFactor: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _owner: string,
      _handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pullTokens(
      token: string,
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawDepositTo(
      withdrawAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addDeposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkSignatures(
      dataHash: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    encodeTransactionData(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execTransaction(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execTransaction_S6W(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      refundInfo: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeBatchCall(
      dest: string[],
      value: BigNumberish[],
      func: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeCall(
      dest: string,
      value: BigNumberish,
      func: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFallbackHandler(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      batchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      targetTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      tokenGasPriceFactor: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handlePaymentRevert(
      gasUsed: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      tokenGasPriceFactor: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _owner: string,
      _handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pullTokens(
      token: string,
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateUserOp(
      userOp: {
        sender: string;
        nonce: BigNumberish;
        initCode: BytesLike;
        callData: BytesLike;
        callGasLimit: BigNumberish;
        verificationGasLimit: BigNumberish;
        preVerificationGas: BigNumberish;
        maxFeePerGas: BigNumberish;
        maxPriorityFeePerGas: BigNumberish;
        paymasterAndData: BytesLike;
        signature: BytesLike;
      },
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDepositTo(
      withdrawAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
