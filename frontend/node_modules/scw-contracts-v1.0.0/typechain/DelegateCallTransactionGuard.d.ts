/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DelegateCallTransactionGuardInterface extends ethers.utils.Interface {
  functions: {
    "allowedTarget()": FunctionFragment;
    "checkAfterExecution(bytes32,bool)": FunctionFragment;
    "checkTransaction((address,uint8,uint256,bytes,uint256),(uint256,uint256,uint256,address,address),bytes,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowedTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAfterExecution",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTransaction",
    values: [
      {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowedTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAfterExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {};
}

export class DelegateCallTransactionGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DelegateCallTransactionGuardInterface;

  functions: {
    allowedTarget(overrides?: CallOverrides): Promise<[string]>;

    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkTransaction(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      arg1: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      arg2: BytesLike,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  allowedTarget(overrides?: CallOverrides): Promise<string>;

  checkAfterExecution(
    arg0: BytesLike,
    arg1: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  checkTransaction(
    _tx: {
      to: string;
      operation: BigNumberish;
      value: BigNumberish;
      data: BytesLike;
      targetTxGas: BigNumberish;
    },
    arg1: {
      baseGas: BigNumberish;
      gasPrice: BigNumberish;
      tokenGasPriceFactor: BigNumberish;
      gasToken: string;
      refundReceiver: string;
    },
    arg2: BytesLike,
    arg3: string,
    overrides?: CallOverrides
  ): Promise<void>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    allowedTarget(overrides?: CallOverrides): Promise<string>;

    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    checkTransaction(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      arg1: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      arg2: BytesLike,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    allowedTarget(overrides?: CallOverrides): Promise<BigNumber>;

    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkTransaction(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      arg1: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      arg2: BytesLike,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowedTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkTransaction(
      _tx: {
        to: string;
        operation: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
        targetTxGas: BigNumberish;
      },
      arg1: {
        baseGas: BigNumberish;
        gasPrice: BigNumberish;
        tokenGasPriceFactor: BigNumberish;
        gasToken: string;
        refundReceiver: string;
      },
      arg2: BytesLike,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
