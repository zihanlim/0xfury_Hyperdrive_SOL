/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GasEstimatorSmartAccount,
  GasEstimatorSmartAccountInterface,
} from "../GasEstimatorSmartAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_actualWallet",
        type: "address",
      },
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "estimate",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061033d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bb0aea3c14610030575b600080fd5b61004361003e36600461019a565b61005b565b6040516100529392919061024d565b60405180910390f35b600060606000805a60405163088924ef60e01b815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018a90529192506000918b169063088924ef906044016020604051808303816000875af11580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e991906102ac565b90508a73ffffffffffffffffffffffffffffffffffffffff1687876040516101129291906102d0565b6000604051808303816000865af19150503d806000811461014f576040519150601f19603f3d011682016040523d82523d6000602084013e610154565b606091505b5090955093505a61016590836102e0565b9250505096509650969350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461019757600080fd5b50565b60008060008060008060a087890312156101b357600080fd5b86356101be81610175565b955060208701356101ce81610175565b945060408701356101de81610175565b935060608701359250608087013567ffffffffffffffff8082111561020257600080fd5b818901915089601f83011261021657600080fd5b81358181111561022557600080fd5b8a602082850101111561023757600080fd5b6020830194508093505050509295509295509295565b831515815260006020606081840152845180606085015260005b8181101561028357868101830151858201608001528201610267565b506000608082860101526080601f19601f83011685010192505050826040830152949350505050565b6000602082840312156102be57600080fd5b81516102c981610175565b9392505050565b8183823760009101908152919050565b8181038181111561030157634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220e537c193f2e16027d309c1682d8919590f5e850d8331945779594696bee6207464736f6c63430008110033";

export class GasEstimatorSmartAccount__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GasEstimatorSmartAccount> {
    return super.deploy(overrides || {}) as Promise<GasEstimatorSmartAccount>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GasEstimatorSmartAccount {
    return super.attach(address) as GasEstimatorSmartAccount;
  }
  connect(signer: Signer): GasEstimatorSmartAccount__factory {
    return super.connect(signer) as GasEstimatorSmartAccount__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasEstimatorSmartAccountInterface {
    return new utils.Interface(_abi) as GasEstimatorSmartAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasEstimatorSmartAccount {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GasEstimatorSmartAccount;
  }
}
