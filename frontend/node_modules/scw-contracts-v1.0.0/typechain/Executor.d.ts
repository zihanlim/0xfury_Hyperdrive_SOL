/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ExecutorInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "ExecutionFailure(address,uint256,bytes,uint8,uint256)": EventFragment;
    "ExecutionSuccess(address,uint256,bytes,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionSuccess"): EventFragment;
}

export type ExecutionFailureEvent = TypedEvent<
  [string, BigNumber, string, number, BigNumber] & {
    to: string;
    value: BigNumber;
    data: string;
    operation: number;
    txGas: BigNumber;
  }
>;

export type ExecutionSuccessEvent = TypedEvent<
  [string, BigNumber, string, number, BigNumber] & {
    to: string;
    value: BigNumber;
    data: string;
    operation: number;
    txGas: BigNumber;
  }
>;

export class Executor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ExecutorInterface;

  functions: {};

  callStatic: {};

  filters: {
    "ExecutionFailure(address,uint256,bytes,uint8,uint256)"(
      to?: string | null,
      value?: BigNumberish | null,
      data?: BytesLike | null,
      operation?: null,
      txGas?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number, BigNumber],
      {
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
        txGas: BigNumber;
      }
    >;

    ExecutionFailure(
      to?: string | null,
      value?: BigNumberish | null,
      data?: BytesLike | null,
      operation?: null,
      txGas?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number, BigNumber],
      {
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
        txGas: BigNumber;
      }
    >;

    "ExecutionSuccess(address,uint256,bytes,uint8,uint256)"(
      to?: string | null,
      value?: BigNumberish | null,
      data?: BytesLike | null,
      operation?: null,
      txGas?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number, BigNumber],
      {
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
        txGas: BigNumber;
      }
    >;

    ExecutionSuccess(
      to?: string | null,
      value?: BigNumberish | null,
      data?: BytesLike | null,
      operation?: null,
      txGas?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number, BigNumber],
      {
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
        txGas: BigNumber;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
