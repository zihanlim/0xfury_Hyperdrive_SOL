import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export interface SmartAccountFactory_v200Interface extends utils.Interface {
    functions: {
        "accountCreationCode()": FunctionFragment;
        "addStake(address,uint32)": FunctionFragment;
        "basicImplementation()": FunctionFragment;
        "deployAccount(address,bytes)": FunctionFragment;
        "deployCounterFactualAccount(address,bytes,uint256)": FunctionFragment;
        "getAddressForCounterFactualAccount(address,bytes,uint256)": FunctionFragment;
        "minimalHandler()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "unlockStake(address)": FunctionFragment;
        "withdrawStake(address,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "accountCreationCode" | "addStake" | "basicImplementation" | "deployAccount" | "deployCounterFactualAccount" | "getAddressForCounterFactualAccount" | "minimalHandler" | "owner" | "renounceOwnership" | "transferOwnership" | "unlockStake" | "withdrawStake"): FunctionFragment;
    encodeFunctionData(functionFragment: "accountCreationCode", values?: undefined): string;
    encodeFunctionData(functionFragment: "addStake", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "basicImplementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "deployAccount", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "deployCounterFactualAccount", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getAddressForCounterFactualAccount", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "minimalHandler", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "unlockStake", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawStake", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "accountCreationCode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "basicImplementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployCounterFactualAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAddressForCounterFactualAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimalHandler", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unlockStake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawStake", data: BytesLike): Result;
    events: {
        "AccountCreation(address,address,uint256)": EventFragment;
        "AccountCreationWithoutIndex(address,address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AccountCreation"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AccountCreationWithoutIndex"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export interface AccountCreationEventObject {
    account: string;
    initialAuthModule: string;
    index: BigNumber;
}
export type AccountCreationEvent = TypedEvent<[
    string,
    string,
    BigNumber
], AccountCreationEventObject>;
export type AccountCreationEventFilter = TypedEventFilter<AccountCreationEvent>;
export interface AccountCreationWithoutIndexEventObject {
    account: string;
    initialAuthModule: string;
}
export type AccountCreationWithoutIndexEvent = TypedEvent<[
    string,
    string
], AccountCreationWithoutIndexEventObject>;
export type AccountCreationWithoutIndexEventFilter = TypedEventFilter<AccountCreationWithoutIndexEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface SmartAccountFactory_v200 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SmartAccountFactory_v200Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        accountCreationCode(overrides?: CallOverrides): Promise<[string]>;
        addStake(epAddress: PromiseOrValue<string>, unstakeDelaySec: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        basicImplementation(overrides?: CallOverrides): Promise<[string]>;
        deployAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deployCounterFactualAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getAddressForCounterFactualAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            _account: string;
        }>;
        minimalHandler(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        unlockStake(epAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawStake(epAddress: PromiseOrValue<string>, withdrawAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    accountCreationCode(overrides?: CallOverrides): Promise<string>;
    addStake(epAddress: PromiseOrValue<string>, unstakeDelaySec: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    basicImplementation(overrides?: CallOverrides): Promise<string>;
    deployAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deployCounterFactualAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getAddressForCounterFactualAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    minimalHandler(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    unlockStake(epAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawStake(epAddress: PromiseOrValue<string>, withdrawAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        accountCreationCode(overrides?: CallOverrides): Promise<string>;
        addStake(epAddress: PromiseOrValue<string>, unstakeDelaySec: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        basicImplementation(overrides?: CallOverrides): Promise<string>;
        deployAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        deployCounterFactualAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getAddressForCounterFactualAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        minimalHandler(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        unlockStake(epAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawStake(epAddress: PromiseOrValue<string>, withdrawAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AccountCreation(address,address,uint256)"(account?: PromiseOrValue<string> | null, initialAuthModule?: PromiseOrValue<string> | null, index?: PromiseOrValue<BigNumberish> | null): AccountCreationEventFilter;
        AccountCreation(account?: PromiseOrValue<string> | null, initialAuthModule?: PromiseOrValue<string> | null, index?: PromiseOrValue<BigNumberish> | null): AccountCreationEventFilter;
        "AccountCreationWithoutIndex(address,address)"(account?: PromiseOrValue<string> | null, initialAuthModule?: PromiseOrValue<string> | null): AccountCreationWithoutIndexEventFilter;
        AccountCreationWithoutIndex(account?: PromiseOrValue<string> | null, initialAuthModule?: PromiseOrValue<string> | null): AccountCreationWithoutIndexEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        accountCreationCode(overrides?: CallOverrides): Promise<BigNumber>;
        addStake(epAddress: PromiseOrValue<string>, unstakeDelaySec: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        basicImplementation(overrides?: CallOverrides): Promise<BigNumber>;
        deployAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deployCounterFactualAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getAddressForCounterFactualAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        minimalHandler(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        unlockStake(epAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawStake(epAddress: PromiseOrValue<string>, withdrawAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        accountCreationCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        addStake(epAddress: PromiseOrValue<string>, unstakeDelaySec: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        basicImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deployAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deployCounterFactualAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getAddressForCounterFactualAccount(moduleSetupContract: PromiseOrValue<string>, moduleSetupData: PromiseOrValue<BytesLike>, index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        minimalHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        unlockStake(epAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawStake(epAddress: PromiseOrValue<string>, withdrawAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
