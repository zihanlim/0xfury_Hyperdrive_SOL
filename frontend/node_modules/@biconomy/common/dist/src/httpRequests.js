"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendRequest = exports.HttpMethod = void 0;
const Logger_1 = require("./Logger");
var HttpMethod;
(function (HttpMethod) {
    HttpMethod["Get"] = "get";
    HttpMethod["Post"] = "post";
    HttpMethod["Delete"] = "delete";
})(HttpMethod || (exports.HttpMethod = HttpMethod = {}));
async function sendRequest({ url, method, body, headers = {} }) {
    Logger_1.Logger.log("jsonRpc request body ", JSON.stringify(body));
    const response = await fetch(url, {
        method,
        headers: {
            ...headers,
            Accept: "application/json",
            "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
    });
    let jsonResponse;
    try {
        jsonResponse = (await response.json());
    }
    catch (error) {
        if (!response.ok) {
            throw new Error(response.statusText);
        }
    }
    if (!jsonResponse) {
        // Handle the case where jsonResponse is undefined
        throw new Error("No response received.");
    }
    Logger_1.Logger.log("jsonRpc response ", jsonResponse);
    if (response.ok) {
        if (jsonResponse && Object.prototype.hasOwnProperty.call(jsonResponse, "result")) {
            return jsonResponse;
        }
        // else
    }
    const errorObject = { code: response.status, message: response.statusText, data: undefined };
    if (jsonResponse === null || jsonResponse === void 0 ? void 0 : jsonResponse.error) {
        if (typeof jsonResponse.error === "string") {
            const error = jsonResponse.error;
            errorObject.code = response.status;
            errorObject.message = error;
            delete errorObject.data;
            throw errorObject;
        }
        else if (typeof jsonResponse.error === "object") {
            const error = jsonResponse.error;
            errorObject.code = (error === null || error === void 0 ? void 0 : error.code) || 0;
            errorObject.message = (error === null || error === void 0 ? void 0 : error.message) || "Unknown Error";
            errorObject.data = error === null || error === void 0 ? void 0 : error.handleOpsCallData;
            throw errorObject;
        }
    }
    if (jsonResponse === null || jsonResponse === void 0 ? void 0 : jsonResponse.message) {
        errorObject.message = jsonResponse.message;
        throw errorObject;
    }
    if (jsonResponse === null || jsonResponse === void 0 ? void 0 : jsonResponse.msg) {
        errorObject.message = jsonResponse.msg;
        throw errorObject;
    }
    throw new Error("Unknown Error: Raise an issue here https://github.com/bcnmy/biconomy-client-sdk/issues with reproduction steps");
}
exports.sendRequest = sendRequest;
//# sourceMappingURL=httpRequests.js.map