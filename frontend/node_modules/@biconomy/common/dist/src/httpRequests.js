"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendRequest = exports.HttpMethod = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const Logger_1 = require("./Logger");
var HttpMethod;
(function (HttpMethod) {
    HttpMethod["Get"] = "get";
    HttpMethod["Post"] = "post";
    HttpMethod["Delete"] = "delete";
})(HttpMethod = exports.HttpMethod || (exports.HttpMethod = {}));
async function sendRequest({ url, method, body, headers = {} }) {
    const response = await (0, node_fetch_1.default)(url, {
        method,
        headers: {
            ...headers,
            Accept: 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
    });
    let jsonResponse;
    try {
        jsonResponse = await response.json();
    }
    catch (error) {
        if (!response.ok) {
            throw new Error(response.statusText);
        }
    }
    Logger_1.Logger.log('jsonRpc response ', jsonResponse);
    if (response.ok) {
        if (jsonResponse && jsonResponse.hasOwnProperty('result')) {
            return jsonResponse;
        }
        // else
    }
    const errorObject = { code: response.status, message: response.statusText };
    if (jsonResponse === null || jsonResponse === void 0 ? void 0 : jsonResponse.error) {
        if (typeof jsonResponse.error === 'string') {
            const error = jsonResponse.error;
            errorObject.code = response.status;
            errorObject.message = error;
            throw errorObject;
        }
        else if (typeof jsonResponse.error === 'object') {
            const error = jsonResponse.error;
            errorObject.code = error === null || error === void 0 ? void 0 : error.code;
            errorObject.message = error === null || error === void 0 ? void 0 : error.message;
            throw errorObject;
        }
    }
    if (jsonResponse === null || jsonResponse === void 0 ? void 0 : jsonResponse.message) {
        errorObject.message = jsonResponse.message;
        throw errorObject;
    }
    if (jsonResponse === null || jsonResponse === void 0 ? void 0 : jsonResponse.msg) {
        errorObject.message = jsonResponse.msg;
        throw errorObject;
    }
    throw new Error('Unknown Error: Raise an issue here https://github.com/bcnmy/biconomy-client-sdk/issues with reproduction steps');
}
exports.sendRequest = sendRequest;
//# sourceMappingURL=httpRequests.js.map