import { Web3AuthCore } from "@web3auth/core";
import { SafeEventEmitterProvider, UserInfo } from "@web3auth/base";
import NodeClient from "@biconomy/node-client";
import { SocialLoginDTO, WhiteLabelDataType } from "./types/Web3AuthConfig";
declare class SocialLogin {
    walletDiv: any;
    walletIframe: any;
    iWin: any;
    iframeInitialized: boolean;
    isInit: boolean;
    clientId: string;
    whiteLabel: WhiteLabelDataType;
    userInfo: Partial<UserInfo> | null;
    web3auth: Web3AuthCore | null;
    provider: SafeEventEmitterProvider | null;
    backendUrl: string;
    nodeClient: NodeClient;
    constructor(backendUrl?: string);
    whitelistUrl(origin: string): Promise<string>;
    init(socialLoginDTO?: Partial<SocialLoginDTO>): Promise<void>;
    getProvider(): SafeEventEmitterProvider | null;
    private _createIframe;
    private createWalletDiv;
    showWallet(): void;
    hideWallet(): void;
    getUserInfo(): Promise<Partial<UserInfo> | null>;
    getPrivateKey(): Promise<string | null>;
    socialLogin(loginProvider: string): Promise<SafeEventEmitterProvider | null>;
    emailLogin(email: string): Promise<SafeEventEmitterProvider | null>;
    metamaskLogin(): Promise<SafeEventEmitterProvider | null>;
    walletConnectLogin(): Promise<SafeEventEmitterProvider | null>;
    logout(): Promise<void>;
}
declare const socialLoginSDK: SocialLogin;
export default SocialLogin;
declare const getSocialLoginSDK: (socialLoginDTO?: Partial<SocialLoginDTO>) => Promise<SocialLogin>;
export { socialLoginSDK, getSocialLoginSDK };
